import os
import os.path as osp
import pandas as pd
import numpy as np
import argparse
from pandas import DataFrame
from eval_test import dump_csv
from data_loader import *


def create_argparse():
    parser = argparse.ArgumentParser()
    parser.add_argument('--predict_filepath')
    parser.add_argument('--npy_filename')
    return parser


def load_prediction(predict_filepath):
    data = pd.read_csv(predict_filepath)
    result = [] 
    for v in data.values:
        filename, predicted = v
        result.append((filename, predicted))
    return result


def gen_submission(data, result_filepath):
    result = []
    id = []
    for v in data:
        filename, predicted = v

        prediction = np.zeros(9, np.float)
        false_prob = 1e-15
        true_prob = 1-1e-15
        sum = 8 * false_prob + true_prob
        prediction[:] = false_prob / sum
        prediction[predicted] = true_prob / sum

        id.append(filename) 
        result.append(prediction)
    results = np.asarray(result)
    results = results.ravel().reshape(results.shape)
    cols = ['Id']
    d = {'Id': id}
    for i in range(9):
        predict_i = 'Prediction{}'.format(i+1)
        cols.append(predict_i)
        d[predict_i] = results[:,i]
    df = DataFrame(d, columns=cols) 
    df.to_csv(result_filepath, index=False)


def gen_submission_from_npy(npy_filepath, result_filepath):
    data_path = osp.join(os.getcwd(), '..', 'test', 'data', 'resnet50')
    combined_data_path = osp.join(os.getcwd(), '..', 'test', 'data', 'combined_rn50')
    batch_size = 1000
    data = DataLoader(batch_size, data_path, combined_data_path, public_test=True)
    results = np.load(npy_filepath)
    dump_csv(results, data, result_filepath, 9)


if __name__ == '__main__':
    args = create_argparse().parse_args()
    result_filepath = osp.join(os.getcwd(), '..', 'test', 'result', 'submissions.csv')
    if args.predict_filepath != None:
        predicted_dir = osp.join(os.getcwd(), '..', 'test', 'result')
        predict_filepath = osp.join(predicted_dir, args.predict_filepath)
        data = load_prediction(predict_filepath)
        gen_submission(data, result_filepath)
    elif args.npy_filename != None:
        npy_dir = osp.join(os.getcwd(), '..', 'test', 'npy_res')
        npy_filepath = osp.join(npy_dir, args.npy_filename)
        gen_submission_from_npy(npy_filepath, result_filepath)
    else:
        print("Nothing to do!!!")
