from tqdm import tqdm
from fcnet import *
from data_loader import *
import os
import os.path as osp
import torch
import argparse
from pandas import DataFrame
from utils import *


def create_argparse():
    parser = argparse.ArgumentParser()
    parser.add_argument('checkpoint_filepath', help='Path of checkpoint file')
    return parser


def eval(N, data):
    cnt = 0
    results = []
    best_predicts = []
    top = 1
    device = 'cpu'
    if torch.cuda.is_available():
        device = 'cuda'
    while cnt < data.cnt_total:
        x = data.next_test()
        cnt += x.shape[0]
        x = torch.Tensor(x).to(device)
        out = N(x)
        _, predicts = out.sort(1) 
        predicts = predicts[:, -top:].cpu().numpy().tolist()
        results += [*out]
        best_predicts += predicts
    results = np.asarray([x.detach().cpu().numpy() for x in results])
    results = results.ravel().reshape(results.shape)
    best_predicts = np.asarray(best_predicts)
    return results, best_predicts


def dump_csv(results, data, result_filepath, top):
    list_files = [osp.splitext(x)[0] for x in data.x_file_map.tolist()]
    num_files = len(list_files)
    cols = ['Id']
    d = {'Id': list_files}
    for i in range(top):
        predict_i = 'Prediction{}'.format(i+1)
        d[predict_i] = results[:,i]
        cols.append(predict_i)
    df = DataFrame(d, columns=cols)
    df.to_csv(result_filepath, index=False)


if __name__ == '__main__':
    args = create_argparse().parse_args()
    checkpoint_dir = osp.join(os.getcwd(), '..', 'train', 'checkpoint')
    data_path = osp.join(os.getcwd(), '..', 'test', 'data', 'resnet50')
#    combined_data_path = osp.join(os.getcwd(), '..', 'test', 'data', 'combined_rn50')
    combined_data_path = osp.join(os.getcwd(), '..', 'val')
    result_dir = osp.join(os.getcwd(), '..', 'test', 'result')
    npy_res_dir = osp.join(os.getcwd(), '..', 'test', 'npy_res')
    result_filepath = osp.join(result_dir, 'predicted.csv')
    best_filepath = osp.join(result_dir, 'best_predicted.csv')
    npy_res_filepath = osp.join(npy_res_dir, 'predicted.npy')
    create_folder(result_dir)
    create_folder(combined_data_path)
    create_folder(npy_res_dir)

    N = load_checkpoint(checkpoint_dir, args.checkpoint_filepath)
    N = N['Net']
    N.eval()
    data = DataLoader(N.batch_size, data_path, combined_data_path, public_test=True)
    results, best_predicts = eval(N, data)
    np.save(npy_res_filepath, results)
    dump_csv(results, data, result_filepath, 9)
    dump_csv(best_predicts, data, best_filepath, 1)
