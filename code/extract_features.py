import os
import os.path as osp
import itertools
import argparse
import math
import numpy as np
import cv2
from utils import *
import multiprocessing
from multiprocessing import Process


def to_feat_vec(file_path):
    content = [x.rstrip() for x in open(file_path, 'rb').readlines()]
    merged = list(itertools.chain(*content))
    return np.asarray(merged)


def to_image(feat_vec):
    length = len(feat_vec)
    sz = int(math.sqrt(length))
    i = 0
    j = 0
    if sz**2 != length:
        sz += 1
    if sz < 224:
        sz = 224
    image = np.zeros(shape=(sz,sz), dtype=np.byte)
    while i < length:
        image[j][:min(i+sz, length)-i] = feat_vec[i:min(i+sz, length)]
        j += 1
        i += sz
    return image


def extract_feature(data_info, fp):
    filename, label = data_info
    bin_fp, feat_vec_fold, image_fold = fp
    print(filename)
    bin_fp = osp.join(bin_fp, filename + '.bin')
    # Save feature vector
    fv_filepath = osp.join(feat_vec_fold, str(label)) if label != None else feat_vec_fold
    fv_filepath = osp.join(fv_filepath, filename + '.npy')
    feat_vec = to_feat_vec(bin_fp)
    if not osp.exists(fv_filepath):
        np.save(fv_filepath, feat_vec)
    # Save image
    image_filepath = osp.join(image_fold, str(label)) if label != None else image_fold
    image_filepath = osp.join(image_filepath, filename + '.png')
    if not osp.exists(image_filepath):
        image = to_image(feat_vec)
        cv2.imwrite(image_filepath, image)


def group_async_task(params, fp):
    for p in params:
        extract_feature(p, fp)


def run_multiprocess_extract(train_info, fp):
    num_processes = max(1, multiprocessing.cpu_count() - 1)
    ntask_per_process = train_info.__len__() // num_processes + 1
    p = []
    for i in range(num_processes):
        sub_p = train_info[i * ntask_per_process : min(i * ntask_per_process + ntask_per_process, train_info.__len__())]
        p.append(Process(target=group_async_task, args=(sub_p, fp,)))
        p[-1].start()
    for task_group in p:
        task_group.join()


def extract_train_data():
    train_labels_fp = osp.join(os.getcwd(), '..', 'train', 'trainLabels.csv')
    train_bin_fp = osp.join(os.getcwd(), '..', 'train', 'Binary', 'bin')
    train_info = sorted(load_train_info(train_labels_fp), key=lambda x: x[1])

    # Prepare data folders
    feat_vec_fold = osp.join(os.getcwd(), '..', 'train', 'data', 'feat_vec')
    image_fold = osp.join(os.getcwd(), '..', 'train', 'data', 'image')
    create_folder(feat_vec_fold)
    create_folder(image_fold)
    labels = set([x[1] for x in train_info])
    for label in labels:
        l_fv = osp.join(feat_vec_fold, str(label))
        l_img = osp.join(image_fold, str(label))
        create_folder(l_fv)
        create_folder(l_img)

    # Extract feature & Convert bin to image
    run_multiprocess_extract(train_info, (train_bin_fp, feat_vec_fold, image_fold))


def extract_test_data():
    test_bin_fp = osp.join(os.getcwd(), '..', 'test', 'bin')
    test_info = [(osp.splitext(x)[0], None) for x in sorted(os.listdir(test_bin_fp))]
    feat_vec_fold = osp.join(os.getcwd(), '..', 'test', 'data', 'feat_vec')
    image_fold = osp.join(os.getcwd(), '..', 'test', 'data', 'image')
    create_folder(feat_vec_fold)
    create_folder(image_fold)

    # Extract feature & Convert bin to image
    run_multiprocess_extract(test_info, (test_bin_fp, feat_vec_fold, image_fold))


if __name__ == '__main__':
    extract_train_data()
    extract_test_data()
