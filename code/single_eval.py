import os
import os.path as osp
from fcnet import *
import numpy as np


def eval(N, x):
    cnt = 0
    results = []
    best_predicts = []
    top = 1
    device = 'cpu'
    if torch.cuda.is_available():
        device = 'cuda'
    x = torch.Tensor(x).to(device)
    out = N(x)
    _, predicts = out.sort(1) 
    predicts = predicts[:, -top:].cpu().numpy().tolist()
    results += [*out]
    best_predicts += predicts
    results = np.asarray([x.detach().cpu().numpy() for x in results])
    results = results.ravel().reshape(results.shape)
    best_predicts = np.asarray(best_predicts)
    return results, best_predicts


if __name__ == '__main__':
    checkpoint_dir = osp.join(os.getcwd(), '..', 'train', 'checkpoint')
    val_path = osp.join(os.getcwd(), '..', 'val', 'x_attributes.npy')
    result_path = osp.join(os.getcwd(), '..', 'val', 'predict.npy')
    N = load_checkpoint(checkpoint_dir, '3.weight')
    N = N['Net']
    x = np.load(val_path)
    results, best_predicts = eval(N, x)
    np.save(result_path, best_predicts)
