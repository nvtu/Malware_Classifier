from utils import *
import numpy as np
import os
import os.path as osp
import numpy as np
import matplotlib.pyplot as plt
import itertools


def plot_confusion_matrix(cm, classes,
                          normalize=False,
                          title='Confusion matrix',
                          cmap=plt.cm.Blues):
    """
    This function prints and plots the confusion matrix.
    Normalization can be applied by setting `normalize=True`.
    """
    if normalize:
        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]
        print("Normalized confusion matrix")
    else:
        print('Confusion matrix, without normalization')

    print(cm)

    plt.imshow(cm, interpolation='nearest', cmap=cmap)
    plt.title(title)
    plt.colorbar()
    tick_marks = np.arange(len(classes))
    plt.xticks(tick_marks, classes, rotation=45)
    plt.yticks(tick_marks, classes)

    fmt = '.2f' if normalize else 'd'
    thresh = cm.max() / 2.
    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):
        plt.text(j, i, format(cm[i, j], fmt),
                 horizontalalignment="center",
                 color="white" if cm[i, j] > thresh else "black")

    plt.ylabel('True label')
    plt.xlabel('Predicted label')
    plt.tight_layout()


if __name__ == '__main__':
    predict_filepath = osp.join(os.getcwd(), '..', 'val', 'predict.npy')
    gt_filepath = osp.join(os.getcwd(), '..', 'val', 'y_attributes.npy')
    predict = np.load(predict_filepath).ravel().tolist()
    gt = np.load(gt_filepath)
    gt = [i.argmax(0) for i in gt]
    conf_mat, labels = gen_malware_conf_mat(predict, gt)
    plt.figure()
    plot_confusion_matrix(conf_mat, classes=labels, title='Malware classification confusion matrix')
    plt.savefig('confusion_matrix.png', bbox_inches='tight')
